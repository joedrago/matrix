// Generated by CoffeeScript 2.5.1
(function() {
  var Net, bodyParser, config, express, fs, http, https, iso8601, main, matrixQuery, matrixSet, matrixStatus, now, ports, refreshDashboards, run, serverEpoch, sockets;

  express = require('express');

  bodyParser = require('body-parser');

  iso8601 = require('iso8601-duration');

  fs = require('fs');

  http = require('http');

  https = require('https');

  Net = require('net');

  config = null;

  ports = null;

  now = function() {
    return Math.floor(Date.now() / 1000);
  };

  serverEpoch = now();

  sockets = {};

  matrixQuery = function(postData) {
    return new Promise(function(resolve, reject) {
      var client, httpRequest, str;
      // The HDMI matrix doesn't return proper HTTP replies, so I must manually do this request
      httpRequest = "POST /inform.cgi?undefined HTTP/1.1\r\n" + "Content-Type: application/x-www-form-urlencoded\r\n" + `Content-Length: ${postData.length}\r\n` + "Connection: close\r\n" + "\r\n";
      client = new Net.Socket();
      client.setTimeout(5000);
      client.connect({
        port: 80,
        host: config.ip
      }, function() {
        client.write(httpRequest);
        return client.write(postData);
      });
      str = "";
      client.on('data', function(chunk) {
        return str += String(chunk);
      });
      client.on('end', function() {
        var data;
        client.destroy();
        data = null;
        try {
          return resolve(JSON.parse(str));
        } catch (error) {
          return reject(`failed to parse: ${str}`);
        }
      });
      return client.on('timeout', function() {
        client.destroy();
        return reject('timeout');
      });
    });
  };

  matrixStatus = async function() {
    var i, inputIndex, outputIndex, rawStatus, status;
    rawStatus = (await matrixQuery("getStatus="));
    status = {};
    for (outputIndex = i = 1; i <= 8; outputIndex = ++i) {
      inputIndex = rawStatus[`mapping${outputIndex}`];
      if (inputIndex == null) {
        inputIndex = 1;
      }
      status[outputIndex] = parseInt(inputIndex);
    }
    return status;
  };

  matrixSet = function(output, input) {
    return matrixQuery(`out${output}=${input}`);
  };

  refreshDashboards = async function() {
    var i, len, port, ref, results, sid, soc, status;
    status = (await matrixStatus());
    ref = ports.outputs;
    for (i = 0, len = ref.length; i < len; i++) {
      port = ref[i];
      port.input = status[port.id];
    }
    results = [];
    for (sid in sockets) {
      soc = sockets[sid];
      results.push(soc.emit('refresh', ports));
    }
    return results;
  };

  run = function(args) {
    return console.log(`RUN: ${JSON.stringify(args)}`);
  };

  main = function(argv) {
    var app, httpServer, io;
    config = JSON.parse(fs.readFileSync("config.json", "utf8"));
    ports = JSON.parse(fs.readFileSync("ports.json", "utf8"));
    app = express();
    httpServer = http.createServer(app);
    io = require('socket.io')(httpServer);
    io.on('connection', function(socket) {
      sockets[socket.id] = socket;
      refreshDashboards();
      socket.on('set', async function(msg) {
        var e;
        try {
          await matrixSet(msg.output, msg.input);
        } catch (error) {
          e = error;
          console.log(`ERROR: ${e}`);
          return;
        }
        return refreshDashboards();
      });
      return socket.on('disconnect', function() {
        if (sockets[socket.id] != null) {
          return delete sockets[socket.id];
        }
      });
    });
    app.get('/', function(req, res) {
      var html;
      html = fs.readFileSync(`${__dirname}/../web/dashboard.html`, "utf8");
      return res.send(html);
    });
    app.use(bodyParser.json());
    app.post('/cmd', function(req, res) {
      var args, response;
      console.log(req.body);
      if ((req.body != null) && (req.body.cmd != null)) {
        args = req.body.cmd.split(/\s+/g);
        response = run(args);
        console.log(`CMD: ${response}`);
        res.send(response);
        return;
      }
      return res.send("MATRIX: wat");
    });
    app.use(express.static('web'));
    return httpServer.listen(3005, function() {
      return console.log('listening on port 3005');
    });
  };

  module.exports = main;

}).call(this);
